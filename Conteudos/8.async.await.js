// async â†’ transforma uma funÃ§Ã£o em assÃ­ncrona (retorna Promise).
// await â†’ pausa a execuÃ§Ã£o da funÃ§Ã£o atÃ© a Promise ser resolvida.
// Isso substitui a necessidade de usar .then() e .catch(), deixando o cÃ³digo mais limpo.

// Exemplo GPT

// // ðŸ”¸ Usando Promise + .then()
function buscarDados() {
  return new Promise(resolve => {
    setTimeout(() => resolve("ðŸ“¦ Dados recebidos usando then"), 2000);
  });
}

buscarDados()
  .then(res => {
    console.log(res);
    return "âœ… Processado usando then";
  })
  .then(console.log)
  .catch(console.error);
  
// // ðŸ”¸ Usando async/await

function buscarDadosAsyncAwait() {
  return new Promise(resolve => {
    setTimeout(() => resolve("ðŸ“¦ Dados recebidos usando async e await"), 2000);
  });
}

async function executar() {
  try {
    const dados = await buscarDadosAsyncAwait();
    console.log(dados);

    const resultado = "âœ… Processado usando async e await";
    console.log(resultado);
  } catch (erro) {
    console.error(erro);
  }
}

executar();